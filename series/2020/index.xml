<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2020 on 개발자 지호</title><link>/series/2020/</link><description>Recent content in 2020 on 개발자 지호</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2021 &lt;a href="4ppl3Hun73r.github.io/">지호&lt;/a></copyright><lastBuildDate>Sat, 16 May 2020 00:00:00 +0900</lastBuildDate><atom:link href="/series/2020/index.xml" rel="self" type="application/rss+xml"/><item><title>분산 시스템 추적 시스템</title><link>/posts/2020/05/distributedtracing/</link><pubDate>Sat, 16 May 2020 00:00:00 +0900</pubDate><guid>/posts/2020/05/distributedtracing/</guid><description>이전 포스팅에서 MDC 를 이용한 로그를 남기고 여러 시스템간의 로그를 추적하는 기능에 대해서 포스팅을 했었다. Slf4j Mapped Diagnostic Context (MDC) 를 이용한 사용자 요청 추적 나중에 확인해 보니 이미 MSA 환경</description></item><item><title>nginx resource logging disable 처리</title><link>/posts/2020/03/nginxresourcelogdisable/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0900</pubDate><guid>/posts/2020/03/nginxresourcelogdisable/</guid><description>문제점 css, js, png 같은 정적 자원들이 log 에 표시되는걸 없애고 싶다 Nginx Log 제어 방법 공식문서, logging conditional map $uri $name { .(css|js|png)$ 0; default 1; } access_log logs/access.log main if=$loggable; or set $loggable 1; access_log logs/access.log main if=$loggable; if ($uri ~* &amp;quot;.(css|js|png)$&amp;quot;) { set $loggable 0; }</description></item><item><title>zookeeper 를 이용한 leader / client 구조 개발</title><link>/posts/2021/03/zookeeperpractice/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0900</pubDate><guid>/posts/2021/03/zookeeperpractice/</guid><description>JAVA 환경에서 여러 서버의 상태를 관리해야 하는 일이 생겼다. 현재 스펙 각 서버는 각자의 처리량을 가지고 있다. 기존 방식은 처리량을 redis에 저장하고 각자의 서버들이 red</description></item><item><title>Slf4j Mapped Diagnostic Context (MDC) 를 이용한 사용자 요청 추적</title><link>/posts/2020/02/slf4jmdclogging/</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0900</pubDate><guid>/posts/2020/02/slf4jmdclogging/</guid><description>문제점 특정 에러 로그를 봤을떄 에러의 시작점을 찾기까지 추적하는데 불편함을 느낌 개선 아이디어 사용자의 요청 마다 Unique ID 를 발급하여 로그를 남길때 마다 추가 로그에 찍힌 ID를 가</description></item><item><title>rSocket</title><link>/posts/2020/01/rsocket/</link><pubDate>Sat, 18 Jan 2020 00:00:00 +0900</pubDate><guid>/posts/2020/01/rsocket/</guid><description>Netflix 에서 개발한 Reactive Stream을 기반으로 한 어플리케이션 프로토콜. 마이크로 서비스상에서 Http 통신이 비효율적인 부분이 있기 때문에 오버헤드가 적은 프로토콜로 대체하려는 용</description></item></channel></rss>